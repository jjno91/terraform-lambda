name: Main
on: push

permissions:
  id-token: write # needed for aws-actions/configure-aws-credentials

env:
  TF_VAR_image: 107018555615.dkr.ecr.us-east-1.amazonaws.com/terraform-lambda:${{ github.sha }}

jobs:
  Format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: terraform fmt -check -diff
  Validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4 # backend validate fails without login
        with:
          role-to-assume: ${{ secrets.ROLE }}
          aws-region: us-east-1
      - run: terraform init
      - run: terraform validate
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: terraform-linters/setup-tflint@v4
      - run: tflint -f compact
  Test:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE }}
          aws-region: us-east-1
      - run: terraform init
      - run: terraform plan -out=.tfplan
      - run: terraform apply -auto-approve .tfplan
      - run: terraform plan -detailed-exitcode -refresh=false
      #- run: terraform destroy -auto-approve -refresh=false
      #  if: always()
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE }}
          aws-region: us-east-1
      - uses: aws-actions/amazon-ecr-login@v2
      - run: docker build -t ${TF_VAR_image} .
      - run: >
          docker push ${TF_VAR_image}
          ||
          aws ecr create-repository
          --repository-name ${{ github.event.repository.name }}
          --image-scanning-configuration scanOnPush=true
          --encryption-configuration encryptionType=AES256
          &&
          awc ecr set-repository-policy
          --repository-name ${{ github.event.repository.name }}
          --policy-text
          {
          "Effect": "Allow",
          "Principal": {"Service": "lambda.amazonaws.com"},
          "Action": ["ecr:BatchGetImage" , "ecr:GetDownloadUrlForLayer"]
          }
          &&
          docker push ${TF_VAR_image}
